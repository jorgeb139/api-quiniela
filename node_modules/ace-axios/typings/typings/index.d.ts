export declare type Method = {
    /** HTTP 请求 OPTIONS */
    OPTIONS: string;
    /** HTTP 请求 GET */
    GET: string;
    /** HTTP 请求 HEAD */
    HEAD: string;
    /** HTTP 请求 POST */
    POST: string;
    /** HTTP 请求 PUT */
    PUT: string;
    /** HTTP 请求 DELETE */
    DELETE: string;
    /** HTTP 请求 TRACE */
    TRACE: string;
    /** HTTP 请求 CONNECT */
    CONNECT: string;
};
export interface AxiosTransformer {
    (data: any, headers?: any): any;
}
export interface AxiosAdapter {
    (config: AxiosRequestConfig): AxiosPromise<any>;
}
export interface AxiosBasicCredentials {
    username: string;
    password: string;
}
export declare type ResponseType = 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';
export interface AxiosRequestConfig {
    url?: string;
    method?: keyof Method;
    baseURL?: string;
    transformRequest?: AxiosTransformer | AxiosTransformer[];
    transformResponse?: AxiosTransformer | AxiosTransformer[];
    headers?: any;
    params?: any;
    paramsSerializer?: (params: any) => string;
    data?: any;
    timeout?: number;
    timeoutErrorMessage?: string;
    withCredentials?: boolean;
    adapter?: AxiosAdapter;
    auth?: AxiosBasicCredentials;
    responseType?: ResponseType;
    maxContentLength?: number;
}
export interface AxiosResponse<T = any> {
    data: T;
    status: number;
    statusText?: string;
    headers: any;
    config: AxiosRequestConfig;
    request?: any;
}
export interface AxiosError<T = any> extends Error {
    config: AxiosRequestConfig;
    code?: string;
    request?: any;
    response?: AxiosResponse<T>;
    isAxiosError: boolean;
    toJSON: () => object;
}
export interface AxiosPromise<T = any> extends Promise<AxiosResponse<T>> {
}
export interface AxiosInterceptorManager<V> {
    use(onFulfilled?: (value: V) => V | Promise<V>, onRejected?: (error: any) => any): number;
    eject(id: number): void;
}
