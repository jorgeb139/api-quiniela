import Taro from '@tarojs/taro';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var InterceptorsManger = /** @class */ (function () {
    function InterceptorsManger() {
        this.handlers = [];
        this.handlers = [];
    }
    InterceptorsManger.prototype.use = function (fulfilled, rejected) {
        this.handlers.push({ fulfilled: fulfilled, rejected: rejected });
        return this.handlers.length - 1;
    };
    InterceptorsManger.prototype.eject = function (id) {
        if (this.handlers[id]) {
            this.handlers[id] = null;
        }
    };
    InterceptorsManger.prototype.forEach = function (fn) {
        this.handlers.forEach(function (handler) {
            if (handler !== null) {
                fn(handler);
            }
        });
    };
    return InterceptorsManger;
}());

var _toString = Object.prototype.toString;
function isObject(obj) {
    return obj !== null && typeof obj === 'object';
}
function isPlainObject(obj) {
    return _toString.call(obj) === '[object Object]';
}
function isArray(arr) {
    return Array.isArray(arr);
}
function isDate(val) {
    return _toString.call(val) === '[object Date]';
}
function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}
function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
}
function hasOwn(obj, key) {
    if (!isObject(obj))
        return false;
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function forEach(obj, fn) {
    if (obj === null || typeof obj === 'undefined') {
        return;
    }
    if (typeof obj !== 'object') {
        obj = [obj];
    }
    if (isArray(obj)) {
        // tslint:disable-next-line:one-variable-per-declaration
        for (var i = 0, l = obj.length; i < l; i++) {
            fn && fn.call(null, obj[i], i, obj);
        }
    }
    else {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                fn && fn.call(null, obj[key], key, obj);
            }
        }
    }
}
function merge() {
    var params = []; /* obj1, obj2, obj3, ... */
    for (var _i = 0 /* obj1, obj2, obj3, ... */; _i < arguments.length /* obj1, obj2, obj3, ... */; _i++ /* obj1, obj2, obj3, ... */) {
        params[_i] = arguments[_i]; /* obj1, obj2, obj3, ... */
    }
    var result = {};
    function assignValue(val, key) {
        if (typeof result[key] === 'object' && typeof val === 'object') {
            result[key] = merge(result[key], val);
        }
        else {
            result[key] = val;
        }
    }
    // tslint:disable-next-line:one-variable-per-declaration
    for (var i = 0, l = params.length; i < l; i++) {
        forEach(params[i], assignValue);
    }
    return result;
}
function extend(target, from) {
    for (var key in from) {
        target[key] = from[key];
    }
    return target;
}

function transformData(data, headers, fns) {
    fns = isArray(fns) ? fns : [fns];
    fns.forEach(function (fn) {
        if (!fn)
            return;
        data = fn(data, headers);
    });
    return data;
}

function isAbsoluteURL(url) {
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
}

function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
}

function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
}

function encode(val) {
    return encodeURIComponent(val)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/g, '$')
        .replace(/%2C/gi, ',')
        .replace(/%20/g, '+')
        .replace(/%5B/gi, '[')
        .replace(/%5D/gi, ']');
}
function buildURL(url, params, paramsSerializer) {
    if (!params)
        return url;
    var serializedParams;
    if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
    }
    else if (isURLSearchParams(params)) {
        serializedParams = params.toString();
    }
    else {
        var parts_1 = [];
        var _loop_1 = function (key) {
            var val = params[key];
            if (val === null || typeof val === 'undefined')
                return "continue";
            if (isArray(val)) {
                key += '[]';
            }
            else {
                val = [val];
            }
            val.forEach(function (v) {
                if (isPlainObject(v)) {
                    v = JSON.stringify(v);
                }
                else if (isDate(v)) {
                    v = v.toISOString();
                }
                parts_1.push(encode(key) + "=" + encode(v));
            });
        };
        for (var key in params) {
            _loop_1(key);
        }
        serializedParams = parts_1.join('&');
        if (serializedParams) {
            url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
        }
    }
    return url;
}

function taroAdapter(config) {
    return new Promise(function dispatchTaroRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (isFormData(requestData)) {
            delete requestHeaders['Content-Type'];
        }
        var fullPath = buildFullPath(config.baseURL || '', config.url || '');
        var url = buildURL(fullPath, config.params, config.paramsSerializer);
        Taro.request({
            url: url,
            data: config.data,
            header: config.headers,
            method: config.method,
            success: function (res) {
                resolve({
                    data: res.data,
                    status: res.statusCode,
                    headers: res.header,
                    config: config
                });
            },
            fail: function (err) { return reject(err); }
        });
    });
}

function normalizeHeaderName(headers, normalizedName) {
    forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
}

// const DEFAULT_CONTENT_TYPE = {
//   'Content-Type': 'application/x-www-form-urlencoded'
// };
function getDefaultAdapter() {
    return taroAdapter;
}
var defaults = {
    baseURL: '',
    method: 'GET',
    mode: 'no-cors',
    headers: { common: {} },
    adapter: getDefaultAdapter(),
    params: {},
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, 'Content-Type');
            return data;
        }
    ]
};

function dispatchRequest(config) {
    config.headers = config.headers || {};
    config.data = transformData(config.data, config.headers, config.transformRequest);
    config.headers = merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    var cleanHeaders = ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'];
    cleanHeaders.forEach(function (method) { return delete config.headers[method]; });
    var adapter = (config.adapter || defaults.adapter);
    return adapter(config);
}

function deepClone(obj, hash) {
    if (hash === void 0) { hash = new WeakMap(); }
    if (obj === null)
        return obj;
    if (!isPlainObject(obj))
        return obj;
    if (hash.has(obj))
        return hash.get(obj);
    var target = isArray(obj) ? [] : {};
    hash.set(obj, obj);
    for (var key in obj) {
        if (hasOwn(obj, key)) {
            target[key] = deepClone(obj[key], hash);
        }
    }
    return target;
}
function getMergedValue(target, source) {
    if (isPlainObject(target) && isPlainObject(source)) {
        return merge(target, source);
    }
    else if (isPlainObject(source)) {
        return merge({}, source);
    }
    else if (isArray(source)) {
        return source.slice();
    }
    return source;
}
function mergeConfig(config1, config2) {
    var target = deepClone(config1);
    var source = deepClone(config2);
    Object.keys(source).forEach(function (key) {
        if (hasOwn(target, key)) {
            target[key] = getMergedValue(target[key], source[key]);
        }
        else {
            target[key] = source[key];
        }
    });
    return target;
}

var AxiosInstance = /** @class */ (function () {
    function AxiosInstance(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
            request: new InterceptorsManger(),
            response: new InterceptorsManger()
        };
    }
    AxiosInstance.prototype.request = function (config) {
        config = config || {};
        if (config.method) {
            config.method = config.method.toUpperCase();
        }
        else if (this.defaults.method) {
            config.method = this.defaults.method.toUpperCase();
        }
        else {
            config.method = 'GET';
        }
        config = mergeConfig(this.defaults, config);
        var chain = [dispatchRequest, undefined];
        var promise = Promise.resolve(config);
        this.interceptors.request.forEach(function (interceptor) {
            chain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        this.interceptors.response.forEach(function (interceptor) {
            chain.push(interceptor.fulfilled, interceptor.rejected);
        });
        while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
    };
    AxiosInstance.prototype.get = function (url, params, options) {
        if (options === void 0) { options = {}; }
        options.method = 'GET';
        return this.request(__assign(__assign({ url: url }, options), { params: params }));
    };
    AxiosInstance.prototype.post = function (url, data, options) {
        if (options === void 0) { options = {}; }
        options.method = 'POST';
        return this.request(__assign({ url: url, data: data }, options));
    };
    return AxiosInstance;
}());

function createInstance(defaultConfig) {
    var context = new AxiosInstance(defaultConfig);
    var instance = AxiosInstance.prototype.request.bind(context);
    extend(instance, context);
    return instance;
}
var axios = createInstance(defaults);
axios.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

export default axios;
